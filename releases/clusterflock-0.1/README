SUMMARY:
Clusterflock is a program that attempts to capture the inherent intelligence
in swarming organisms to perform clustering tasks. Our particular application 
is evolutionary: we set out to cluster genes that share the same phylogenetic 
history. But the technique is general, and can be used to cluster any set of 
entities with precalculated pairwise distances. Importantly, clusterflock 
requires no prior estimation of the number of clusters to expect (as in Kmeans) or 
arbitrary cutoff for what constitutes true difference between pairs (as in 
hierarchical clustering).

SCRIPTS and MODULES:
Clusterflock is written in PERL.

clusterflock.pl is the main flocking/clustering engine.
pp_pa.pl is a post-processing utility designed to create a flock matrix from
	 clusterflock replicates.

INSTALLATION:
To install clusterflock simply copy clusterflock.pl and pp_pa.pl into your $PATH

DEPENDENCIES:
Clusterflock requires the following perl modules:
Getopt::Long
Pod::Usage
POSIX
List::MoreUtils qw(part)
List::Util qw(shuffle)
Chart::Gnuplot

For plotting frames as gifs, clusterflock requires the installation of gnuplot.
(clusterflock-0.1/dependencies/gnuplot-5.0.1.tar.gz)

For creating animated gifs clusterflock requires the installation of gifscicle.
(clusterflock-0.1/dependencies/gifsicle-1.88.tar.gz)

For spatial clustering of flocking frames, clusterflock requires the use of ELKI's 
OPTICS clustering algorithm, whose full path must be specified in the config file 
detailed below. 
(clusterflock-0.1/dependencies/elki-bundle-0.6.5~20141030.jar)

CONFIGURATION:
An example configuration file is provided. Parameters are optimized for the 
problem described in the paper.
	DIMMENSIONS define the square virtual space that the entities travel.
	RADIUS defines the neighborhood within which an entity must check the 
	       behavior of its flockmates
	BOUNDARY defines the boarder of the virtual space to signal that an 
	         entitiy must bounce of the wall.
	INIT_VELOCITY defines the initial velocity of all entities.
	VELOCITY_LIMIT defines an upper bound for the velocity of entities.
	ITERATIONS defines the number of frames in the simulation.
	SEPARATION_DISTANCE defines the minimum distance between flocking entities.
	COHESION_FACTOR modulates the strength of the cohesion vector; decreasing 
			this factor increases the cohesive effect.
	ALIGNMENT_FACTOR modulates the strength of the alignment vector;
			 decreasing this factor increases the alignment effect.
	REPEL_FACTOR modulates the strength of the repulsion vector; increasing 
		     this factor increases the repulsive effect.
	JARFILE specifies the full path to the ELKI jar file for OPTICS clustering.
	MINPTS defines the minimum number fo points to call an OPTICS cluster.
	XI defines the OPTICS contrast parameter for establishing the relative 
	   decrease in density.

RUNNING:
See usage instructions accompanying each script.

OUTPUT of clusterflock.pl:
flocks.log contains the number of flocks found by OPTICS clustering for each 
frame. This data is only available if OPTICS clustering is set to on.

final.gif contains the final movie of the flocking procedure. The movie is only 
available if gnuplot drawing is set to on.

The output directory contains a number of sub-directories.

flocks/ contains the raw output of ELKI OPTICS calculations for each frame as 
well as parsed flock membership tables.

images/ contains gifs drawn for each frame if gnuplot drawing is set to on.

logs/ contains logs for pairwise distances accessed for each iteration and 
      a given frame's positional information for each entity.

posvel/ contains logs of positional and velocity information for each entity.

ild/ contains commands and logs for the realtime calculation of evolutionary 
     distances as entities encounter each other in the virtual space. 
     For this version of the software we have eliminated this function, but users 
     should contact the authors for plugins that will reinstate this ability or 
     separate pipelines that will calculate all-against-all LD distances.

STDERR logs several metrics of interest. Lines beginning with ITERATION contain 
the following tab delimited data: 1. The number of unique ILD lookups for the 
entire simulation; 2. the total number of realtime distance calculations 
(eliminated); 3. the total number of distance lookups from cache; 4. the total 
number of pairwise comparisons calculated for this iteration post spatial hashing 
and perception heuristics; 5. the total number of necessary pairwise comparisons 
per iteration per entity.

OUTPUT of pp_pa.pl:
A flock matrix is printed to STDOUT. This flock matrix can then be used in any 
tree building program to assess the robustness of entities that flock together 
across multiple replicates of the clusterflock simulation.
